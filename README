README for Page Replacement Algorithm Simulator
Authors: Na Li, Thomas Wilkinson
December 2020

This project is a simulator for 3 different algorithms that replace pages in physical memory. The project is run at the command line, requiring inputs
to be physical page size, physical memory size, and the trace file which details all of the memory reads to simulate. 

The modules provide a good outline as to each simulated aspect and the data structure behind it.

TraceParser.c & TraceParser.h
the TraceParser is the main file which is responsible for reading through the trace. It will keep track of which processes are blocked, and where the last
memory read was to continue at. If there is a successful memory read, then the parser continues to read through the trace. If there is an unsuccessful 
memory read, then we block the process and skip to the next unblocked process in the trace. A table of processes is used to keep track of all the
processes.

Process.c & Process.h
This module defines the process, marking whether or not its blocked and its first and last read. It also contains the pagetable, which is further
explained below.

PageTable.c & PageTable.h
This module defines the pagetable, which in our simulation is a BST for each process. This way we can clear out all of a processes in fast time 
when a process has no more memory reads in the trace file.

Here are more explanantions for the rest of the files: (will update soon)
- InvertedPageTable.c,this file contains definitions for the inverted page table. In addition to the IPT, there is a free list that contains all of the free PPNs, and takes out of that list to give one. pid, vpn, and an algorithm node pointer are stored in the IPT.
- DiskQueue.c, this file contains definitions for the disk queue, which stores diskQueueNodes contained pid vpn pairs, and where to jump back to in the file. It is a doubly linked list and has methods to insert and grab from the list.
- FifoReplacement.c, the module contains functiions that help to create the FIFO queue, add or remove node in the queue.
- LRUReplacement.c, the module contains functiions that help to create the LRU queue, add or remove node in the queue.
- ClockReplacement.c, the module contains functiions that help to create the Clock queue, add or remove node in the queue.
- Statistics.c, the module contains functiions that help toThe module contains functiions that help to calculate the statistics of the project, including AMU, ARP, toal page fault, total memory reads, total clocl ticks.
- Makefile, makefile of the project, which compiles the files.


